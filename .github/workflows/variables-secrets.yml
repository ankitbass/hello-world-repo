name: Exploring variables & secrets  #workflow name is "Exploring variables & secrets"
on: 
  workflow_dispatch: #will create a 'run workflow' button in Actions. This workflow needs to be manually trigegred. This is event based trigger.
                     # There are many other options on event based trigger

  #schedule:
   # - cron: "*1/ * * * *"  #example of running a cron job
  #push                     #trigger is push based. this is automatic triggering mechanism i.e. once you push and commit this code, it gets
                            #automatically triggered in Actions

env:                        # defining environment variables at workflow level
  CONTAINER_REGISTRY: docker.io
  IMAGE_NAME: github-actions-nginx

jobs:                      # first job
  docker:                  # first job name is 'docker' 
    runs-on: ubuntu-latest # running on ubuntu's latest version
    steps:                   
    - name: Docker Build   # first step name
      run: echo docker build -t ${{env.CONTAINER_REGISTRY}}/${{vars.DOCKER_USERNAME}}/$IMAGE_NAME:latest #this will run on a vdi

    - name: Docker Login    # second step name
      run: echo docker login --username=${{vars.DOCKER_USERNAME}} --password=${{secrets.DOCKER_PASSWORD}} #this will run on a vdi

    - name: Docker Publish  # third step name
      run: echo docker push $CONTAINER_REGISTRY/${{vars.DOCKER_USERNAME}}$IMAGE_NAME:latest                # #this will run on a vdi

  deploy:                               # second job name is 'deploy'
    needs: docker                       # prerequisite added. 1st 'docker' job will run then only 'deploy' job will run.
    concurrency:                        # concurrency logic added
        group: production-deployment    #creating a group. giving it a unique key/name 
        cancel-in-progress: true        # it will cancel any other running workflow or job within the same concurrency group if the value here is true

    runs-on: ubuntu-latest
    steps:
    - name: Docker Run
      timeout-minutes: 5  #can be at job level or step level. this is the max timeout within which this step needs to run
      run: |          # pipe symbol used. this step consists 2 commands. pipe symbolis used to preserve the newlines, indentations, spaces etc. in a multiline string
        echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/${{vars.DOCKER_USERNAME}}$IMAGE_NAME:latest
        sleep 6s